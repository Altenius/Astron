OpenOTP Internal Protocol Documentation
08-30-2013
Sam "CFSworks" Edwards


Section 0: Abstract

The purpose of this document is to be a complete reference describing how to
communicate within the OpenOTP cluster. At the heart of every OpenOTP cluster
is a backbone consisting of one or more "Message Directors" which route
messages between the various nodes in the cluster. This document describes the
exact protocol used by the MDs to communicate, as well as the various types of
messages that one can expect to see in a working OpenOTP environment.


Section 1: Anatomy of a message

OpenOTP Message Directors are linked via TCP streams. The linking forms a
tree; that is, no routing loops may exist in a Message Director network. If a
routing loop exists, the traffic will be amplified into a broadcast storm.

When any TCP connection is established, there is an initiator (or connector)
and a receiver (or listener). This distinction is important in the OpenOTP
Message Director hierarchy: One Message Director should be configured as a
root node, which makes no connections to any other nodes. Instead, the root
node listens for connections from other Message Directors, which may either
host other components of the OpenOTP cluster, or they may themselves listen
for connections from other MDs.

Once the TCP connection is open, there is no handshaking process required. The
connecting MD may simply begin sending messages. The format of a typical
message is described below:

uint16 length;
uint8 recipient_count;
uint64 recipients[recipient_count];
uint64 sender;
uint16 msgtype;
...the message may have a payload following msgtype...

All multi-byte types are to be sent in little-endian order. The "length" tag
represents the length of the message, in bytes, NOT counting itself.
Therefore, consider this example message:

1a 00 // Length: count of the following bytes
01 // One recipient channel
d2 04 00 00 00 00 00 00 // Recipient channel ID = 1234
e1 10 00 00 00 00 00 00 // Sender channel ID = 4321
39 05 // Message type code 1337.
05 00 48 45 4c 4c 4f // Payload for the message; in this example, the string
                        "HELLO" -- strings are prefixed with a length field of
			their own, hence the 05 00



Section 2: Control messages

As Message Directors operate on a publish-subscribe model, a message will only
be sent downlink (i.e. from a listener to a connector) if the connector
specifically requested to be informed of messages on one of the message's
channels. Uplink messages, however, are sent unsolicited.

To request messages on a channel, the upstream Message Director must receive a
control message from a downstream MD requesting to be added to a channel.

Control messages are distinguished by two things:
1. Control messages must be sent to only channel 4001, and no other channels.
2. Control messages OMIT the sender field; this is because the sender is
   assumed (known) to be the MD on the other end of the link.

The following control messages exist, with their respective formats:

CONTROL_SET_CON_NAME(2004): (string)
CONTROL_SET_CON_URL(2005): (string)
As every OpenOTP daemon may include a webserver with debug information, it is
often helpful to understand the purpose of incoming MD connections. A
downstream MD may be configured with a specific name, and it may wish to
inform the upstream MD what its name and webserver URL are. These control
messages allow the downstream MD to communicate this information.



CONTROL_ADD_POST_REMOVE(2010): (string)
CONTROL_CLEAR_POST_REMOVE(2011): ()
Often, Message Directors may be unexpectedly disconnected from one another, or
a Message Director may crash while under normal operation without the chance
to clean up. These control messages allow a downstream MD to schedule messages
on the upstream MD to be sent in the event of an unexpected disconnect.

The argument to CONTROL_ADD_POST_REMOVE is a string; the string contains a
message, minus the length tag (since the string already includes a length tag
of its own, this would be redundant information).
CONTROL_CLEAR_POST_REMOVE is used to reset all of the on-disconnect messages.
This may be used prior to a MD's clean shutdown, if it doesn't wish the
unexpected-disconnect messages to be processed.


CONTROL_ADD_CHANNEL(2001): (uint64)
CONTROL_REMOVE_CHANNEL(2002): (uint64)
These messages allow a downstream Message Director to (un)subscribe a channel.
The argument is the channel to be added or removed from the subscriptions.


CONTROL_ADD_RANGE(2008): (uint64, uint64)
CONTROL_REMOVE_RANGE(2009): (uint64, uint64)
These messages add/remove an entire range of channels at once. The first
argument(s) should be the lower channel to add. The second argument(s) is the
upper channel of the range. The ranges are inclusive.


Section 3: State Server messages

This section documents the messages involved in interacting with a State
Server. A State Server is a component with a single, preconfigured channel.
This channel is used to request the State Server to instantiate new objects.
When an object is instantiated, the object behaves as if it were its own
Message Director participant, and subscribes to its own channel (equal to the
object's ID) to receive object-specific updates. Therefore, the functions of
the State Server's control channel are very narrow compared to the wide range
of control afforded by communicating to an instantiated object directly.

Section 3.1: State Server control messages

These messages are to be sent directly to the State Server's configured
control channel:

-- TBD --

Section 3.2: Object control messages

These messages are to be sent to the objects themselves. Objects subscribe to
a channel with their own object ID, and therefore can be reached directly by
using their ID as the channel.

-- TBD --
